// <auto-generated />
using System;
using CodingChallengeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodingChallengeAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("CodingChallengeAPI.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.Deposit", b =>
                {
                    b.Property<long>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FeeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("DepositId");

                    b.HasIndex("AccountId");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.Outstanding", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AccountId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Outstanding");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.TransferTransactions", b =>
                {
                    b.Property<long>("TransactionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TransferAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<long?>("TransferFrom")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TransferTo")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionsId");

                    b.ToTable("TransferTransactions");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.Deposit", b =>
                {
                    b.HasOne("CodingChallengeAPI.Models.Account", "Account")
                        .WithMany("Deposits")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.Outstanding", b =>
                {
                    b.HasOne("CodingChallengeAPI.Models.Account", "Account")
                        .WithOne("Outstanding")
                        .HasForeignKey("CodingChallengeAPI.Models.Outstanding", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("CodingChallengeAPI.Models.Account", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Outstanding");
                });
#pragma warning restore 612, 618
        }
    }
}
